
/*
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package ardufocuser.starfocusing.gui;

import ardufocuser.starfocusing.FitsImage;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author zerjillo josemlp
 */
public class MainFrame extends javax.swing.JFrame {

    ArrayList<StarFieldFrame> subframes;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        subframes = new ArrayList<>();

        initComponents();
        radiusSurroundingPeak.setModel(new SpinnerNumberModel(10, 1, 20, 1));
        marginSize.setModel(new SpinnerNumberModel(20, 1, 40, 1));
        contrastFilterRadius.setModel(new SpinnerNumberModel(10, 1, 20, 1));
        minimumQuotient.setModel(new SpinnerNumberModel(1.9, 1.0, 10.0, 0.1));

        gausianRadius.setModel(new SpinnerNumberModel(1, 1, 50, 1));
        gausianNormalMin.setModel(new SpinnerNumberModel(1.0, 1.0, 50.0, 1.0));
        gausianMeanMin.setModel(new SpinnerNumberModel(1.0, 1.0, 50.0, 1.0));
        gausianSigmaMin.setModel(new SpinnerNumberModel(1.0, 1.0, 50.0, 1.0));
        
        
         fwhmMinFilter.setModel(new SpinnerNumberModel(17, 1, 40, 1));
         fwhmRadius.setModel(new SpinnerNumberModel(10, 1, 100, 1));


        // Imagen por defecto. Solo para debug.
        //addStarFieldFrame(new File("/home/josemlp/workspace/pruebasEnfoque/nucleo24880_042.fit"));

        setBounds(50, 50, 1024, 700);

        FileFilter imageFilter = new FileNameExtensionFilter("FITS Image files", new String[]{"fits", "fit"});

        fileChooser.addChoosableFileFilter(imageFilter);
        fileChooser.setAcceptAllFileFilterUsed(false);

        ImageIcon icon = new javax.swing.ImageIcon(getClass().getResource("/ardufocuser/starfocusing/gui/img/esquimoIcon.png"));

        this.setIconImage(icon.getImage());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        bottomFilterPanel = new javax.swing.JPanel();
        panelFIlter = new javax.swing.JTabbedPane();
        panelFilterEnableDetect = new javax.swing.JPanel();
        detectStars = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        radiusSurroundingPeak = new javax.swing.JSpinner();
        panelFilterMargin = new javax.swing.JPanel();
        filterMargin = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        marginSize = new javax.swing.JSpinner();
        panelFIlterContrast = new javax.swing.JPanel();
        contrastFilter = new javax.swing.JCheckBox();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        contrastFilterRadius = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        minimumQuotient = new javax.swing.JSpinner();
        panelFilterDistance = new javax.swing.JPanel();
        distanceFilter = new javax.swing.JCheckBox();
        jPanel12 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        distanceSize = new javax.swing.JSpinner();
        panelFilterFWHM = new javax.swing.JPanel();
        fwhmFilter = new javax.swing.JCheckBox();
        jPanel13 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        fwhmMinFilter = new javax.swing.JSpinner();
        jLabel10 = new javax.swing.JLabel();
        fwhmRadius = new javax.swing.JSpinner();
        panelFilterGausian = new javax.swing.JPanel();
        gaussianFilter = new javax.swing.JCheckBox();
        jPanel14 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        gausianRadius = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        gausianNormalMin = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        gausianMeanMin = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        gausianSigmaMin = new javax.swing.JSpinner();
        panelFilterNumber = new javax.swing.JPanel();
        numberFilter = new javax.swing.JCheckBox();
        jPanel15 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        numberSize = new javax.swing.JSpinner();
        asideRightPanel = new javax.swing.JPanel();
        openImage = new javax.swing.JButton();
        displayPanel = new javax.swing.JScrollPane();
        windowsPanel = new javax.swing.JDesktopPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Star Focusing");

        bottomFilterPanel.setLayout(new java.awt.BorderLayout());

        panelFilterEnableDetect.setLayout(new java.awt.GridLayout(2, 1));

        detectStars.setSelected(true);
        detectStars.setText("Detect Stars");
        detectStars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detectStarsActionPerformed(evt);
            }
        });
        panelFilterEnableDetect.add(detectStars);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("Radius surrounding peak:");
        jPanel4.add(jLabel1);

        radiusSurroundingPeak.setMinimumSize(new java.awt.Dimension(40, 18));
        radiusSurroundingPeak.setPreferredSize(new java.awt.Dimension(40, 18));
        radiusSurroundingPeak.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radiusSurroundingPeakStateChanged(evt);
            }
        });
        jPanel4.add(radiusSurroundingPeak);

        panelFilterEnableDetect.add(jPanel4);

        panelFIlter.addTab("Star Detection", panelFilterEnableDetect);

        panelFilterMargin.setLayout(new java.awt.GridLayout(2, 1));

        filterMargin.setText("Filter Margin Stars");
        filterMargin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterMarginActionPerformed(evt);
            }
        });
        panelFilterMargin.add(filterMargin);

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel2.setText("Margin Size:");
        jPanel6.add(jLabel2);

        marginSize.setMinimumSize(new java.awt.Dimension(40, 18));
        marginSize.setPreferredSize(new java.awt.Dimension(40, 18));
        marginSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                marginSizeStateChanged(evt);
            }
        });
        jPanel6.add(marginSize);

        panelFilterMargin.add(jPanel6);

        panelFIlter.addTab("Margin Filter", panelFilterMargin);

        panelFIlterContrast.setLayout(new java.awt.GridLayout(2, 1));

        contrastFilter.setText("Contrast Filter");
        contrastFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastFilterActionPerformed(evt);
            }
        });
        panelFIlterContrast.add(contrastFilter);

        jPanel8.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel3.setText("Radius:");
        jPanel8.add(jLabel3);

        contrastFilterRadius.setMinimumSize(new java.awt.Dimension(40, 18));
        contrastFilterRadius.setPreferredSize(new java.awt.Dimension(40, 18));
        contrastFilterRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                contrastFilterRadiusStateChanged(evt);
            }
        });
        jPanel8.add(contrastFilterRadius);

        jLabel4.setText("   Minimum Quotient:");
        jPanel8.add(jLabel4);

        minimumQuotient.setMinimumSize(new java.awt.Dimension(40, 18));
        minimumQuotient.setPreferredSize(new java.awt.Dimension(40, 18));
        minimumQuotient.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minimumQuotientStateChanged(evt);
            }
        });
        jPanel8.add(minimumQuotient);

        panelFIlterContrast.add(jPanel8);

        panelFIlter.addTab("Contrast Filter", panelFIlterContrast);

        panelFilterDistance.setLayout(new java.awt.GridLayout(2, 1));

        distanceFilter.setText("Distance Filter");
        distanceFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceFilterActionPerformed(evt);
            }
        });
        panelFilterDistance.add(distanceFilter);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel5.setText("Distance");
        jPanel12.add(jLabel5);
        jLabel5.getAccessibleContext().setAccessibleName("Ma");

        distanceSize.setMinimumSize(new java.awt.Dimension(40, 18));
        distanceSize.setPreferredSize(new java.awt.Dimension(40, 18));
        distanceSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                distanceSizeStateChanged(evt);
            }
        });
        jPanel12.add(distanceSize);

        panelFilterDistance.add(jPanel12);

        panelFIlter.addTab("Distance Filter", panelFilterDistance);

        panelFilterFWHM.setLayout(new java.awt.GridLayout(2, 1));

        fwhmFilter.setText("FWHM Filter");
        fwhmFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fwhmFilterActionPerformed(evt);
            }
        });
        panelFilterFWHM.add(fwhmFilter);

        jPanel13.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel6.setText("Minimum value");
        jPanel13.add(jLabel6);

        fwhmMinFilter.setMinimumSize(new java.awt.Dimension(40, 18));
        fwhmMinFilter.setPreferredSize(new java.awt.Dimension(40, 18));
        fwhmMinFilter.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fwhmMinFilterStateChanged(evt);
            }
        });
        jPanel13.add(fwhmMinFilter);

        jLabel10.setText("Radius");
        jPanel13.add(jLabel10);

        fwhmRadius.setMinimumSize(new java.awt.Dimension(40, 18));
        fwhmRadius.setPreferredSize(new java.awt.Dimension(40, 18));
        fwhmRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fwhmRadiusStateChanged(evt);
            }
        });
        jPanel13.add(fwhmRadius);

        panelFilterFWHM.add(jPanel13);

        panelFIlter.addTab("FWHM Filter", panelFilterFWHM);

        panelFilterGausian.setLayout(new java.awt.GridLayout(2, 1));

        gaussianFilter.setText("Gaussian Filter");
        gaussianFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaussianFilterActionPerformed(evt);
            }
        });
        panelFilterGausian.add(gaussianFilter);

        jPanel14.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel12.setText("Radius");
        jPanel14.add(jLabel12);

        gausianRadius.setMinimumSize(new java.awt.Dimension(40, 18));
        gausianRadius.setPreferredSize(new java.awt.Dimension(40, 18));
        gausianRadius.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gausianRadiusStateChanged(evt);
            }
        });
        jPanel14.add(gausianRadius);

        jLabel7.setText("Normal");
        jPanel14.add(jLabel7);
        jLabel7.getAccessibleContext().setAccessibleDescription("");

        gausianNormalMin.setMinimumSize(new java.awt.Dimension(40, 18));
        gausianNormalMin.setPreferredSize(new java.awt.Dimension(40, 18));
        gausianNormalMin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gausianNormalMinStateChanged(evt);
            }
        });
        jPanel14.add(gausianNormalMin);

        jLabel8.setText("Mean");
        jPanel14.add(jLabel8);

        gausianMeanMin.setMinimumSize(new java.awt.Dimension(40, 18));
        gausianMeanMin.setPreferredSize(new java.awt.Dimension(40, 18));
        gausianMeanMin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gausianMeanMinStateChanged(evt);
            }
        });
        jPanel14.add(gausianMeanMin);

        jLabel9.setText("Sigma");
        jPanel14.add(jLabel9);

        gausianSigmaMin.setMinimumSize(new java.awt.Dimension(40, 18));
        gausianSigmaMin.setPreferredSize(new java.awt.Dimension(40, 18));
        gausianSigmaMin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                gausianSigmaMinStateChanged(evt);
            }
        });
        jPanel14.add(gausianSigmaMin);

        panelFilterGausian.add(jPanel14);

        panelFIlter.addTab("Gaussian Filter", panelFilterGausian);

        panelFilterNumber.setLayout(new java.awt.GridLayout(2, 1));

        numberFilter.setText("Number Filter");
        numberFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberFilterActionPerformed(evt);
            }
        });
        panelFilterNumber.add(numberFilter);

        jPanel15.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel11.setText("Number Star");
        jPanel15.add(jLabel11);

        numberSize.setMinimumSize(new java.awt.Dimension(40, 18));
        numberSize.setPreferredSize(new java.awt.Dimension(40, 18));
        numberSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                numberSizeStateChanged(evt);
            }
        });
        jPanel15.add(numberSize);

        panelFilterNumber.add(jPanel15);

        panelFIlter.addTab("Number Filter", panelFilterNumber);

        bottomFilterPanel.add(panelFIlter, java.awt.BorderLayout.CENTER);
        panelFIlter.getAccessibleContext().setAccessibleName("Radius");

        getContentPane().add(bottomFilterPanel, java.awt.BorderLayout.SOUTH);

        asideRightPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        asideRightPanel.setLayout(new java.awt.BorderLayout());

        openImage.setText("Open Image...");
        openImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageActionPerformed(evt);
            }
        });
        asideRightPanel.add(openImage, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(asideRightPanel, java.awt.BorderLayout.EAST);

        javax.swing.GroupLayout windowsPanelLayout = new javax.swing.GroupLayout(windowsPanel);
        windowsPanel.setLayout(windowsPanelLayout);
        windowsPanelLayout.setHorizontalGroup(
            windowsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 584, Short.MAX_VALUE)
        );
        windowsPanelLayout.setVerticalGroup(
            windowsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 377, Short.MAX_VALUE)
        );

        displayPanel.setViewportView(windowsPanel);

        getContentPane().add(displayPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageActionPerformed
        int state = fileChooser.showOpenDialog(this);

        if (state == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();

            if (f.isFile()) {
                addStarFieldFrame(f);
            }
        }
    }//GEN-LAST:event_openImageActionPerformed

    private void minimumQuotientStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minimumQuotientStateChanged
        setDetectStars();
    }//GEN-LAST:event_minimumQuotientStateChanged

    private void contrastFilterRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_contrastFilterRadiusStateChanged
        setDetectStars();
    }//GEN-LAST:event_contrastFilterRadiusStateChanged

    private void contrastFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastFilterActionPerformed
        setDetectStars();
    }//GEN-LAST:event_contrastFilterActionPerformed

    private void marginSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_marginSizeStateChanged
        setDetectStars();
    }//GEN-LAST:event_marginSizeStateChanged

    private void filterMarginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterMarginActionPerformed
        setDetectStars();
    }//GEN-LAST:event_filterMarginActionPerformed

    private void radiusSurroundingPeakStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radiusSurroundingPeakStateChanged
        setDetectStars();
    }//GEN-LAST:event_radiusSurroundingPeakStateChanged

    private void detectStarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detectStarsActionPerformed
        setDetectStars();
    }//GEN-LAST:event_detectStarsActionPerformed

    private void distanceFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceFilterActionPerformed
        setDetectStars();
    }//GEN-LAST:event_distanceFilterActionPerformed

    private void distanceSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_distanceSizeStateChanged
        setDetectStars();

    }//GEN-LAST:event_distanceSizeStateChanged

    private void fwhmFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fwhmFilterActionPerformed
        setDetectStars();
    }//GEN-LAST:event_fwhmFilterActionPerformed

    private void fwhmMinFilterStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fwhmMinFilterStateChanged
        setDetectStars();
    }//GEN-LAST:event_fwhmMinFilterStateChanged

    private void gaussianFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaussianFilterActionPerformed
        setDetectStars();
    }//GEN-LAST:event_gaussianFilterActionPerformed

    private void gausianNormalMinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gausianNormalMinStateChanged
        setDetectStars();
    }//GEN-LAST:event_gausianNormalMinStateChanged

    private void gausianMeanMinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gausianMeanMinStateChanged
        setDetectStars();
    }//GEN-LAST:event_gausianMeanMinStateChanged

    private void gausianSigmaMinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gausianSigmaMinStateChanged
        setDetectStars();
    }//GEN-LAST:event_gausianSigmaMinStateChanged

    private void fwhmRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fwhmRadiusStateChanged
        setDetectStars();
    }//GEN-LAST:event_fwhmRadiusStateChanged

    private void numberFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberFilterActionPerformed
        setDetectStars();
    }//GEN-LAST:event_numberFilterActionPerformed

    private void numberSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_numberSizeStateChanged
        setDetectStars();
    }//GEN-LAST:event_numberSizeStateChanged

    private void gausianRadiusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_gausianRadiusStateChanged
        setDetectStars();
    }//GEN-LAST:event_gausianRadiusStateChanged

    private void setDetectStars() {
        int radius = (int) radiusSurroundingPeak.getValue();
        int mS = (int) marginSize.getValue();
        int ds = (int) distanceSize.getValue();

        int fws = (int) fwhmMinFilter.getValue();
        int fwr = (int) fwhmRadius.getValue();

        int fgr = (int) gausianRadius.getValue();
        double fgn = (double) gausianNormalMin.getValue();
        double fgm = (double) gausianMeanMin.getValue();
        double fgs = (double) gausianSigmaMin.getValue();
        
        int fn = (int) numberSize.getValue();

        int cR = (int) contrastFilterRadius.getValue();
        double mQ = (double) minimumQuotient.getValue();

        for (int i = 0; i < subframes.size(); i++) {
            subframes.get(i).setDetectStars(
                    detectStars.isSelected(), radius,
                    filterMargin.isSelected(), mS,
                    contrastFilter.isSelected(), cR, mQ,
                    distanceFilter.isSelected(), ds,
                    fwhmFilter.isSelected(), fws, fwr,
                    gaussianFilter.isSelected(), fgr, fgn, fgm, fgs,
                    numberFilter.isSelected(), fn
                    
            );
        }
    }

    private void addStarFieldFrame(File image) {
        if (image.exists() && image.isFile()) {
            StarFieldFrame sff = new StarFieldFrame(new FitsImage(image.getAbsolutePath()));
            sff.setVisible(true);

            windowsPanel.add(sff);

            subframes.add(sff);

            setDetectStars();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        /*   try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
         if ("Nimbus".equals(info.getName())) {
         javax.swing.UIManager.setLookAndFeel(info.getClassName());
         break;
         }
         }
         } catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }*/
        //</editor-fold>

        setUIFontSize(10);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    public static void setUIFontSize(int fontSize) {
        for (Map.Entry<Object, Object> entry : javax.swing.UIManager.getDefaults().entrySet()) {
            Object key = entry.getKey();
            Object value = javax.swing.UIManager.get(key);
            if (value != null && value instanceof javax.swing.plaf.FontUIResource) {
                javax.swing.plaf.FontUIResource fr = (javax.swing.plaf.FontUIResource) value;
                javax.swing.plaf.FontUIResource f = new javax.swing.plaf.FontUIResource(fr.getFamily(), fr.getStyle(), fontSize);
                javax.swing.UIManager.put(key, f);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel asideRightPanel;
    private javax.swing.JPanel bottomFilterPanel;
    private javax.swing.JCheckBox contrastFilter;
    private javax.swing.JSpinner contrastFilterRadius;
    private javax.swing.JCheckBox detectStars;
    private javax.swing.JScrollPane displayPanel;
    private javax.swing.JCheckBox distanceFilter;
    private javax.swing.JSpinner distanceSize;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JCheckBox filterMargin;
    private javax.swing.JCheckBox fwhmFilter;
    private javax.swing.JSpinner fwhmMinFilter;
    private javax.swing.JSpinner fwhmRadius;
    private javax.swing.JSpinner gausianMeanMin;
    private javax.swing.JSpinner gausianNormalMin;
    private javax.swing.JSpinner gausianRadius;
    private javax.swing.JSpinner gausianSigmaMin;
    private javax.swing.JCheckBox gaussianFilter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JSpinner marginSize;
    private javax.swing.JSpinner minimumQuotient;
    private javax.swing.JCheckBox numberFilter;
    private javax.swing.JSpinner numberSize;
    private javax.swing.JButton openImage;
    private javax.swing.JTabbedPane panelFIlter;
    private javax.swing.JPanel panelFIlterContrast;
    private javax.swing.JPanel panelFilterDistance;
    private javax.swing.JPanel panelFilterEnableDetect;
    private javax.swing.JPanel panelFilterFWHM;
    private javax.swing.JPanel panelFilterGausian;
    private javax.swing.JPanel panelFilterMargin;
    private javax.swing.JPanel panelFilterNumber;
    private javax.swing.JSpinner radiusSurroundingPeak;
    private javax.swing.JDesktopPane windowsPanel;
    // End of variables declaration//GEN-END:variables
}
